package itstep.learning;

public class OOPDemo {
    public void run() {
        System.out.println("OopDemo");
        new AutoShop().run();
    }
}
/* ООП - парадигма - подход, набор традиций, инструментов для программиования
    -----------------------------------------------
    Интерфейсы(в ООП) - абстрактные классы, которые могут иметь
    - only public
    - only abstract
    - only methods
    Роли:
    - маркер (интерфейс-маркер) как обозначение принадлежности к класу к
        какойто гуппе (при передачи методам, массивам, сервисам)
        Таким интерфейсы могут быть пустые (без методов) и ддовольно
        часто формируют отдельную группу интерфейсов - анотаций (Java)
        или атрибутов в (C#)
    - контракт (интерфейс-контракт) как набор требований для
        имплементации с целью
    - абстракция - обобщение, генеализация - соединение сущностей
    в гуппы, другими словаи, абстрактный термин(абстракция)
    означает не конкетный элемент, а их группу. Это природно
    в людской речи: стол, монитор, стол..., но н так в программмировании,
    каждый объект является конкретикой, и создание абстракций - отдельная
    деятельность

    Абстракция интерфейса:
     авто могут быть дизельные и бензиновые - какая это характеристика?
        это характеристика объектная, не интерфейсная - разные объекты одного класса
        могут быть такими, так и другими
     авто могут быть крупногабаритныи:
        это характеистика интерфейса, поскольку ВСЕ объекты одно классово,
        автоматически имеют(или нет) эту характеристику, не может быть,
        двух мотоциклов - один крупногабаритний, другой нет
-------------------------------------------------------------------------------
                            АНОТАЦИИ
Разновидность интерфейсов-маркеров, которые могут принадлежать не \
данных, но и их составом (полям, методам, конструкторам)
и составляющим – параметрам и т.п.). Их связывают с понятием
метаданных – данными, которые "сопровождают" другие данные. */